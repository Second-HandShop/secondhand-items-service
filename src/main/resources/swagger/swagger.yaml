swagger: "2.0"
info:
  description: "This is server to expose data for the second-hand marketplace application "
  version: "1.0.0"
  title: "Second Hand"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "rabhatt@syr.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/"
tags:
  - name: "item"
    description: "Items in the second hand market"
schemes:
  - "http"
paths:
  /item:
    get:
      tags:
        - "item"
      summary: "Finds items"
      description: "Multiple UserId values can be provided with comma separated strings"
      operationId: "getItemsByUserIds"
      produces:
        - "application/json"
      parameters:
        - name: "userIds"
          in: "query"
          description: "Items posted by given userIds will be retrieved"
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        - name: "categories"
          in: "query"
          description: "Items with given categories will be retrieved"
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        - name: "name"
          in: "query"
          description: "Item name for search"
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetItemsByUserIdsResponse"
        "400":
          description: "Invalid UserIds value"
    post:
      tags:
        - "item"
      summary: "Add an Item"
      description: "Add an item for the user."
      operationId: "addItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Item object that needs to be added."
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
        - "item"
      summary: "Update an existing Item"
      description: ""
      operationId: "updateItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Item object that needs to be updated."
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Item not found"
        "405":
          description: "Validation exception"
  /item/sold:
    post:
      tags:
        - "item"
      summary: "Add an ItemSoldInfo"
      description: "Add an itemSoldInfo for an Item."
      operationId: "addItemSoldInfo"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Item Sold Info object that needs to be added."
          required: true
          schema:
            $ref: "#/definitions/SoldInfo"
      responses:
        "405":
          description: "Invalid input"
  /item/bought:
    get:
      tags:
        - "item"
      summary: "Finds items bought by the user"
      description: "Multiple UserId values can be provided with comma separated strings"
      operationId: "getBoughtItemsByUserIds"
      produces:
        - "application/json"
      parameters:
        - name: "userIds"
          in: "query"
          description: "Items bought by given userIds will be retrieved"
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetItemsByUserIdsResponse"
        "400":
          description: "Invalid UserIds value"
definitions:
  GetItemsByUserIdsResponse:
    type: "object"
    properties:
      userIdsToIdsMap:
        type: object
        additionalProperties:
          type: array
          items:
            $ref: "#/definitions/Item"
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
        description: "Item category"
      addedOn:
        type: "string"
        format: "date-time"
      price:
        type: "number"
        format: "float"
      soldInfo:
        $ref: "#/definitions/SoldInfo"
      userId:
        type: "string"
      resources:
        type: array
        items:
          $ref: "#/definitions/ItemResource"
    xml:
      name: "item"
  SoldInfo:
    type: "object"
    properties:
      itemId:
        type: "integer"
        format: "int64"
      soldAtPrice:
        type: "number"
        format: "float"
      soldOn:
        type: "string"
        format: "date-time"
      soldToUserId:
        type: "string"
  ItemResource:
    type: "object"
    properties:
      name:
        type: "string"
      resourceType:
        type: "string"
        enum:
          - "IMAGE"
          - "VIDEO"
      resourceLink:
        type: "string"